// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izEXE37dzqFMYydSKQTMwJ
// Component: qC0nhTpUWlKT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import YouTube from "@plasmicpkgs/react-youtube";
import Button from "../../Button"; // plasmic-import: Gh37LSrWbm1n/component
import TextInput from "../../TextInput"; // plasmic-import: q3t59J6BzNMN/component

import { useScreenVariants as useScreenVariants_5OGrysLnOcLq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5oGrysLNOcLq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: izEXE37dzqFMYydSKQTMwJ/projectcss
import sty from "./PlasmicTravelLodging.module.css"; // plasmic-import: qC0nhTpUWlKT/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 4OSv8q77pH5j/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: AylNlyNLQHZw/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: hosQIuGq9s5_/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 5oZLK7TbgCyl/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: s_k-724ei_i3/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: R24nyc_5vxfr/icon

createPlasmicElementProxy;

export type PlasmicTravelLodging__VariantMembers = {};
export type PlasmicTravelLodging__VariantsArgs = {};
type VariantPropType = keyof PlasmicTravelLodging__VariantsArgs;
export const PlasmicTravelLodging__VariantProps = new Array<VariantPropType>();

export type PlasmicTravelLodging__ArgsType = {};
type ArgPropType = keyof PlasmicTravelLodging__ArgsType;
export const PlasmicTravelLodging__ArgProps = new Array<ArgPropType>();

export type PlasmicTravelLodging__OverridesType = {
  root?: Flex__<"div">;
  headerMainSection?: Flex__<"div">;
  container?: Flex__<"div">;
  menu?: Flex__<"div">;
  menuBar?: Flex__<"div">;
  h1?: Flex__<"h1">;
  section1?: Flex__<"div">;
  youTube?: Flex__<typeof YouTube>;
  rowContainer8?: Flex__<"div">;
  brownColorBg?: Flex__<"div">;
  section12?: Flex__<"div">;
  rowContainer3?: Flex__<"div">;
  section13?: Flex__<"div">;
  rowContainer9?: Flex__<"div">;
  section14?: Flex__<"div">;
  rowContainer10?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  blockquote?: Flex__<"blockquote">;
};

export interface DefaultTravelLodgingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTravelLodging__RenderFunc(props: {
  variants: PlasmicTravelLodging__VariantsArgs;
  args: PlasmicTravelLodging__ArgsType;
  overrides: PlasmicTravelLodging__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5OGrysLnOcLq()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"menu"}
                data-plasmic-override={overrides.menu}
                hasGap={true}
                className={classNames(projectcss.all, sty.menu)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"menuBar"}
                  data-plasmic-override={overrides.menuBar}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.menuBar)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__nadU)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"50px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/wedding_website/images/image2.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__igmj)}
                  >
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__x7TmM
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__oWeye)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l3QEb
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "About"
                          : "About"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__wYus1)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__cJmi
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__kQMxW)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lJa8I
                        )}
                      >
                        {"Rooms"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__eptzo)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___8Q9Vh
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2CbEu
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xe5UE
                        )}
                      >
                        {"Spa"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__f8BIw)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___4SPo2
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6E5Y2
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qZeTx
                        )}
                      >
                        {"Restaurant"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__kzVb7)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__p9Y7S
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__iysnO)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9XZz
                        )}
                      >
                        {"Amenities"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__moFXj)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__q4HJm
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__f7F9J)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mV6Vw
                        )}
                      >
                        {"Reservations"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__ekiAv)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zFiBr)}
              >
                <div className={classNames(projectcss.all, sty.columns__g24XT)}>
                  <div
                    className={classNames(projectcss.all, sty.column__m9Kul)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___81RYb
                      )}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Discover the world and plan the perfect trip."}
                      </h1>
                    </Stack__>
                  </div>
                </div>
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v0JUc)}>
            <div
              data-plasmic-name={"section1"}
              data-plasmic-override={overrides.section1}
              className={classNames(projectcss.all, sty.section1)}
            >
              <div className={classNames(projectcss.all, sty.columns__uUzHy)}>
                <div className={classNames(projectcss.all, sty.column__oedY0)}>
                  <YouTube
                    data-plasmic-name={"youTube"}
                    data-plasmic-override={overrides.youTube}
                    className={classNames("__wab_instance", sty.youTube)}
                    videoId={"R6MeLqRQzYw"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column___9A3Cp)}>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"rowContainer8"}
                    data-plasmic-override={overrides.rowContainer8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rowContainer8)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__cHcy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                        ? "About our hotel"
                        : "About our resort"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zd6Te
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                    </div>
                  </Stack__>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            <div
              data-plasmic-name={"section12"}
              data-plasmic-override={overrides.section12}
              className={classNames(projectcss.all, sty.section12)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uoNfc)}>
                <div
                  data-plasmic-name={"rowContainer3"}
                  data-plasmic-override={overrides.rowContainer3}
                  className={classNames(projectcss.all, sty.rowContainer3)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__loGyS)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__uq3D)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__jMyzx)}
                        displayHeight={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_website/images/image5.jpg",
                          fullWidth: 640,
                          fullHeight: 853,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___6Ds2I)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rLsB3
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__vdMjM
                          )}
                        >
                          {"Perfect trip"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r94Eo
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__bbnpY
                          )}
                          color={"softBlue"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cX2
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pI8Rb
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dkOgy
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__klLq5
                          )}
                          color={"sand"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hkEfN
                              )}
                              role={"img"}
                            />
                          }
                          link={"#"}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4O4Jf
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sjssM
                            )}
                          >
                            {"View our rooms"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"section13"}
              data-plasmic-override={overrides.section13}
              className={classNames(projectcss.all, sty.section13)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qsdOj)}>
                <div
                  data-plasmic-name={"rowContainer9"}
                  data-plasmic-override={overrides.rowContainer9}
                  className={classNames(projectcss.all, sty.rowContainer9)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__v2M6T)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___34XVi)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__d5UJn)}
                        displayHeight={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_website/images/image6.jpg",
                          fullWidth: 800,
                          fullHeight: 1200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__uRwwb)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__izGfA
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__uy5Ez
                          )}
                        >
                          {"Best rooms"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__htfzt
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__bu28U
                          )}
                          color={"sand"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2E4Kn
                              )}
                              role={"img"}
                            />
                          }
                          link={"#"}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7MngW
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ttudq
                            )}
                          >
                            {"View our rooms"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___7NhTu
                          )}
                          color={"softBlue"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oRgPc
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__i6Fa5
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n0JJf
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"section14"}
              data-plasmic-override={overrides.section14}
              className={classNames(projectcss.all, sty.section14)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__tdSBq)}>
                <div
                  data-plasmic-name={"rowContainer10"}
                  data-plasmic-override={overrides.rowContainer10}
                  className={classNames(projectcss.all, sty.rowContainer10)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__wuXeg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__p6QC1)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__l96Na)}
                        displayHeight={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_website/images/image7.jpg",
                          fullWidth: 2730,
                          fullHeight: 4096,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___1I3KG)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wLoEe
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__xeNi
                          )}
                        >
                          {"Food service"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j41Gi
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletOrSmaller"
                          )
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__giQno
                          )}
                          color={"sand"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yk7XT
                              )}
                              role={"img"}
                            />
                          }
                          link={"#"}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jJwPa
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uOy0H
                            )}
                          >
                            {"View our rooms"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__fitO
                          )}
                          color={"softBlue"}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pIpsx
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__z7OaJ
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nrxY
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xLoZp)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lnUrz)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__hwxW0)}
              >
                <div className={classNames(projectcss.all, sty.column__rt8Jz)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__nSk9I)}
                    displayHeight={"434px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOrSmaller")
                        ? "none"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_website/images/image8.jpg",
                      fullWidth: 2734,
                      fullHeight: 4096,
                      aspectRatio: undefined
                    }}
                  />

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__i6DnU
                    )}
                  >
                    {"Discover new adventures."}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.column__hZ0)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__e3MxE)}
                    displayHeight={"434px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOrSmaller")
                        ? "none"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_website/images/image9.jpg",
                      fullWidth: 800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__z9F9W
                    )}
                  >
                    {"Luxurious service."}
                  </h2>
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__aHyjT)}>
            <div className={classNames(projectcss.all, sty.columns__zekXu)}>
              <div className={classNames(projectcss.all, sty.column__zwH6)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vhQz6)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___04LG7
                    )}
                  >
                    {"Stay posted on special offers and promos"}
                  </h2>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__dMqc3)}
                        role={"img"}
                      />
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={"Email  Address"}
                    startIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__hSXu)}
                        role={"img"}
                      />
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__y6SK4)}
                    color={"sand"}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__itvGn)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__xY6Bq)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dMd8U
                      )}
                    >
                      {"Submit"}
                    </div>
                  </Button>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__yJw2O)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vCrNj)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__bGqIv
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                      ? "Contact us"
                      : "Contact us"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tJcm
                    )}
                  >
                    {"2478 Lorem Ipsum \nLorem Ipsum , Lorem Ipsum "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zx0Lw
                    )}
                  >
                    {"P: 555.789.5643"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__marbe
                    )}
                  >
                    {"E: xyz@yourcompany.com"}
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jq0Sx)}>
            <div className={classNames(projectcss.all, sty.freeBox__qkUa7)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jLlWh)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ifYYr)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aBbpg)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__o3QWc)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__bS
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                          : "Contact"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__tFsnu
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                          : "FAQ"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__bBfUe
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                          : "About us"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__omi0R
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "CONTACT US        CAREERS        PRIVACY        FAQ"
                          : "Privacy policy"}
                      </PlasmicLink__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__arv6A)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__daRj
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon5Icon
                          className={classNames(projectcss.all, sty.svg__p0M4)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__igviF
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon6Icon
                          className={classNames(projectcss.all, sty.svg__gM0T)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__uUgCr
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon7Icon
                          className={classNames(projectcss.all, sty.svg___8VmO)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                    </Stack__>
                    <blockquote
                      data-plasmic-name={"blockquote"}
                      data-plasmic-override={overrides.blockquote}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.blockquote
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u00a9 Company. All rights reserved. This site proudly built with "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__voJiA
                            )}
                            component={Link}
                            href={"https://www.plasmic.app"}
                            platform={"nextjs"}
                          >
                            {"Plasmic"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    </blockquote>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "menu",
    "menuBar",
    "h1",
    "section1",
    "youTube",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10",
    "textInput",
    "blockquote"
  ],
  headerMainSection: [
    "headerMainSection",
    "container",
    "menu",
    "menuBar",
    "h1"
  ],
  container: ["container", "menu", "menuBar", "h1"],
  menu: ["menu", "menuBar"],
  menuBar: ["menuBar"],
  h1: ["h1"],
  section1: ["section1", "youTube", "rowContainer8"],
  youTube: ["youTube"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section13: ["section13", "rowContainer9"],
  rowContainer9: ["rowContainer9"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  textInput: ["textInput"],
  blockquote: ["blockquote"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  menu: "div";
  menuBar: "div";
  h1: "h1";
  section1: "div";
  youTube: typeof YouTube;
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section13: "div";
  rowContainer9: "div";
  section14: "div";
  rowContainer10: "div";
  textInput: typeof TextInput;
  blockquote: "blockquote";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTravelLodging__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTravelLodging__VariantsArgs;
    args?: PlasmicTravelLodging__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTravelLodging__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTravelLodging__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTravelLodging__ArgProps,
          internalVariantPropNames: PlasmicTravelLodging__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTravelLodging__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTravelLodging";
  } else {
    func.displayName = `PlasmicTravelLodging.${nodeName}`;
  }
  return func;
}

export const PlasmicTravelLodging = Object.assign(
  // Top-level PlasmicTravelLodging renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    menu: makeNodeComponent("menu"),
    menuBar: makeNodeComponent("menuBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    youTube: makeNodeComponent("youTube"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    textInput: makeNodeComponent("textInput"),
    blockquote: makeNodeComponent("blockquote"),

    // Metadata about props expected for PlasmicTravelLodging
    internalVariantProps: PlasmicTravelLodging__VariantProps,
    internalArgProps: PlasmicTravelLodging__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTravelLodging;
/* prettier-ignore-end */
