// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izEXE37dzqFMYydSKQTMwJ
// Component: _AIKLMwJJUCS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: izEXE37dzqFMYydSKQTMwJ/projectcss
import sty from "./PlasmicRsvp.module.css"; // plasmic-import: _AIKLMwJJUCS/css

createPlasmicElementProxy;

export type PlasmicRsvp__VariantMembers = {};
export type PlasmicRsvp__VariantsArgs = {};
type VariantPropType = keyof PlasmicRsvp__VariantsArgs;
export const PlasmicRsvp__VariantProps = new Array<VariantPropType>();

export type PlasmicRsvp__ArgsType = {};
type ArgPropType = keyof PlasmicRsvp__ArgsType;
export const PlasmicRsvp__ArgProps = new Array<ArgPropType>();

export type PlasmicRsvp__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  freeBox?: Flex__<"div">;
  firstnameField?: Flex__<typeof FormItemWrapper>;
  firstnameInput?: Flex__<typeof AntdInput>;
  lastnameField?: Flex__<typeof FormItemWrapper>;
  lastnameInput?: Flex__<typeof AntdInput>;
  rsvpFind?: Flex__<typeof AntdButton>;
  findInvitation?: Flex__<"div">;
};

export interface DefaultRsvpProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRsvp__RenderFunc(props: {
  variants: PlasmicRsvp__VariantsArgs;
  args: PlasmicRsvp__ArgsType;
  overrides: PlasmicRsvp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "fetched",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "firstnameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastnameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "firstname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "attendee",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => null
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelAlign: "right",
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              requiredMark: true,
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <FormItemWrapper
                    data-plasmic-name={"firstnameField"}
                    data-plasmic-override={overrides.firstnameField}
                    className={classNames("__wab_instance", sty.firstnameField)}
                    label={"Firstname"}
                    name={"name"}
                    rules={[
                      { ruleType: "required", message: `` },

                      { ruleType: "required" }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.firstnameInput
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["firstnameInput", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateFirstname"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["firstname"]
                                    },
                                    operation: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFirstname"] != null &&
                              typeof $steps["updateFirstname"] === "object" &&
                              typeof $steps["updateFirstname"].then ===
                                "function"
                            ) {
                              $steps["updateFirstname"] = await $steps[
                                "updateFirstname"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "firstnameInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "firstnameInput.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"firstnameInput"}
                          data-plasmic-override={overrides.firstnameInput}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"lastnameField"}
                    data-plasmic-override={overrides.lastnameField}
                    className={classNames("__wab_instance", sty.lastnameField)}
                    label={"Lastname"}
                    name={"lastname"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.lastnameInput
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["lastnameInput", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateLastname"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["lastname"]
                                    },
                                    operation: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLastname"] != null &&
                              typeof $steps["updateLastname"] === "object" &&
                              typeof $steps["updateLastname"].then ===
                                "function"
                            ) {
                              $steps["updateLastname"] = await $steps[
                                "updateLastname"
                              ];
                            }
                          }).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "lastnameInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "lastnameInput.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"lastnameInput"}
                          data-plasmic-override={overrides.lastnameInput}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                </Stack__>
                <AntdButton
                  data-plasmic-name={"rsvpFind"}
                  data-plasmic-override={overrides.rsvpFind}
                  className={classNames("__wab_instance", sty.rsvpFind)}
                  disabled={undefined}
                  onClick={async () => {
                    const $steps = {};

                    $steps["postgresGetList"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "mQkT1YZy8FTyM2SHLtRF2h",
                              opId: "ca60f717-3bd8-4ca9-90fc-9cd2e530c682",
                              userArgs: {},
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresGetList"] != null &&
                      typeof $steps["postgresGetList"] === "object" &&
                      typeof $steps["postgresGetList"].then === "function"
                    ) {
                      $steps["postgresGetList"] = await $steps[
                        "postgresGetList"
                      ];
                    }
                  }}
                  submitsForm={(() => {
                    try {
                      return $state.attendee ? true : false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  type={"primary"}
                >
                  <div
                    data-plasmic-name={"findInvitation"}
                    data-plasmic-override={overrides.findInvitation}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.findInvitation
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            if ($state.attendee) {
                              return "RSVP";
                            } else {
                              return "Find Invitation";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Find Invitation";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </AntdButton>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "freeBox",
    "firstnameField",
    "firstnameInput",
    "lastnameField",
    "lastnameInput",
    "rsvpFind",
    "findInvitation"
  ],
  form: [
    "form",
    "freeBox",
    "firstnameField",
    "firstnameInput",
    "lastnameField",
    "lastnameInput",
    "rsvpFind",
    "findInvitation"
  ],
  freeBox: [
    "freeBox",
    "firstnameField",
    "firstnameInput",
    "lastnameField",
    "lastnameInput"
  ],
  firstnameField: ["firstnameField", "firstnameInput"],
  firstnameInput: ["firstnameInput"],
  lastnameField: ["lastnameField", "lastnameInput"],
  lastnameInput: ["lastnameInput"],
  rsvpFind: ["rsvpFind", "findInvitation"],
  findInvitation: ["findInvitation"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  freeBox: "div";
  firstnameField: typeof FormItemWrapper;
  firstnameInput: typeof AntdInput;
  lastnameField: typeof FormItemWrapper;
  lastnameInput: typeof AntdInput;
  rsvpFind: typeof AntdButton;
  findInvitation: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRsvp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRsvp__VariantsArgs;
    args?: PlasmicRsvp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRsvp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRsvp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRsvp__ArgProps,
          internalVariantPropNames: PlasmicRsvp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRsvp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRsvp";
  } else {
    func.displayName = `PlasmicRsvp.${nodeName}`;
  }
  return func;
}

export const PlasmicRsvp = Object.assign(
  // Top-level PlasmicRsvp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    freeBox: makeNodeComponent("freeBox"),
    firstnameField: makeNodeComponent("firstnameField"),
    firstnameInput: makeNodeComponent("firstnameInput"),
    lastnameField: makeNodeComponent("lastnameField"),
    lastnameInput: makeNodeComponent("lastnameInput"),
    rsvpFind: makeNodeComponent("rsvpFind"),
    findInvitation: makeNodeComponent("findInvitation"),

    // Metadata about props expected for PlasmicRsvp
    internalVariantProps: PlasmicRsvp__VariantProps,
    internalArgProps: PlasmicRsvp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRsvp;
/* prettier-ignore-end */
